{"version":3,"sources":["components/FriendCard/index.js","components/Jumbotron/index.js","App.js","index.js"],"names":["FriendCard","props","className","onClick","clickedFriend","id","alt","name","src","image","Jumbotron","result","type","currentScore","topScore","shuffleArray","array","lengthOfArray","length","index","Math","floor","random","temp","App","console","log","state","clicked","includes","resetGame","pointIncrease","push","setState","gameOver","score","friends","resetFriendArray","points","newArray","gameFinished","this","map","friend","key","Component","ReactDOM","render","document","getElementById"],"mappings":"2oCAWeA,MARf,SAAoBC,GAClB,OACE,yBAAKC,UAAU,cAAcC,QAAS,kBAAMF,EAAMG,cAAcH,EAAMI,MACpE,yBAAKH,UAAU,SAASI,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,UCkB3CC,G,MArBG,SAAAT,GAChB,OAEE,yBAAKC,UAAU,yBACb,wBAAIA,UAAU,+BAAd,eACA,uBAAGA,UAAU,oBAAb,oDACA,wBAAIA,UAAU,SACd,uBAAGA,UAAU,UAAUD,EAAMU,QAC7B,wBAAIT,UAAU,SACd,4BAAQU,KAAK,SAASV,UAAU,yBAAhC,UACS,0BAAMA,UAAU,qBAAqBD,EAAMY,eAEpD,4BAAQD,KAAK,SAASV,UAAU,6BAAhC,cACa,0BAAMA,UAAU,qBAAqBD,EAAMa,c,OCXxDC,EAAe,SAACC,GAIpB,IAFA,IAAIC,EAAgBD,EAAME,OAEnBD,EAAgB,GAAG,CAEtB,IAAIE,EAAQC,KAAKC,MAAMD,KAAKE,SAAWL,GAInCM,EAAOP,IAFXC,GAGAD,EAAMC,GAAiBD,EAAMG,GAC7BH,EAAMG,GAASI,EAEnB,OAAOP,GAsGMQ,E,4MA/FbpB,cAAgB,SAACC,GACfoB,QAAQC,IAAR,mCAAwCrB,IACpC,EAAKsB,MAAMC,QAAQC,SAASxB,GAO9B,EAAKyB,aANL,EAAKC,gBACL,EAAKJ,MAAMC,QAAQI,KAAK3B,GACxB,EAAK4B,SAAS,CACZC,UAAU,M,EAShBH,cAAgB,WACd,IAAII,EAAQ,EAAKR,MAAMd,aAAe,EACtCY,QAAQC,IAAR,uBAA4BS,IACxBA,IAAU,EAAKR,MAAMS,QAAQlB,OAC/B,EAAKe,SAAS,CACZtB,OAAQ,yCACRG,SAAUqB,EACVtB,aAAc,EACde,QAAS,GACTQ,UACAF,UAAU,IAEHC,EAAQ,EAAKR,MAAMb,SAC5B,EAAKmB,SAAS,CACZnB,SAAUqB,EACVtB,aAAcsB,EACdxB,OAAQ,6BAGV,EAAKsB,SAAS,CACZpB,aAAcsB,EACdxB,OAAQ,aAGZ,EAAK0B,oB,EAIPP,UAAY,WACV,EAAKG,SAAS,CACZK,OAAQ,EACRzB,aAAa,EACbC,SAAU,EAAKa,MAAMb,SACrBH,OAAQ,uCACRuB,UAAU,EACVN,QAAS,GACTQ,YAEFX,QAAQC,IAAI,cAAe,EAAKC,MAAMO,UACtC,EAAKG,oB,EAKPA,iBAAmB,WACjB,IAAIE,EAAWxB,EAAaqB,GAC5B,EAAKH,SAAS,CAACG,QAASG,K,EAK1BZ,MAAQ,CACNd,aAAc,EACdC,SAAU,EACVH,OAAQ,GACRiB,QAAS,GACTQ,UACAI,cAAc,G,uDAIN,IAAD,OACP,OACE,yBAAKtC,UAAU,aACb,kBAAC,EAAD,CAAWY,SAAU2B,KAAKd,MAAMb,SAAUD,aAAc4B,KAAKd,MAAMd,aAAcF,OAAQ8B,KAAKd,MAAMhB,SACrG,yBAAKT,UAAU,OACbuC,KAAKd,MAAMS,QAAQM,KAAI,SAAAC,GAAM,OAC5B,kBAAC,EAAD,CACEvC,cAAe,EAAKA,cACpBC,GAAIsC,EAAOtC,GACXuC,IAAKD,EAAOtC,GACZI,MAAOkC,EAAOlC,iB,GA1FRoC,a,MCjBlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.53d2df7a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction FriendCard(props) {\n  return (\n    <div className=\"image col-2\" onClick={() => props.clickedFriend(props.id)}>\n      <img className=\"card-1\" alt={props.name} src={props.image} />\n    </div>\n  );\n}\n\nexport default FriendCard;\n","import React from \"react\";\nimport \"./style.css\";\n\nconst Jumbotron = props => {\n  return (\n\n    <div className=\"jumbotron text-center\">\n      <h1 className=\"display-4 text-center title\">Memory Game</h1>\n      <p className=\"lead text-center\">Click on an image to earn points, but only once!</p>\n      <hr className=\"my-4\" />\n      <p className=\"result\">{props.result}</p>\n      <hr className=\"my-4\" />\n      <button type=\"button\" className=\"btn btn-primary score\">\n        Score: <span className=\"badge badge-light\">{props.currentScore}</span>\n      </button>\n      <button type=\"button\" className=\"btn btn-primary top-score\">\n        Top Score: <span className=\"badge badge-light\">{props.topScore}</span>\n      </button>\n    </div>\n\n  )\n}\n\n\nexport default Jumbotron;\n","import React, { Component } from \"react\";\nimport FriendCard from \"./components/FriendCard\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport friends from \"./friends.json\";\n\nconst shuffleArray = (array) => {\n \n  let lengthOfArray = array.length;\n  // While there are elements in the array\n  while (lengthOfArray > 0) {\n      // Pick a random index\n      let index = Math.floor(Math.random() * lengthOfArray);\n      // Decrease length by 1\n      lengthOfArray--;\n      // And swap the last element with it\n      let temp = array[lengthOfArray];\n      array[lengthOfArray] = array[index];\n      array[index] = temp;\n  }\n  return array;\n};\n\nclass App extends Component {\n\n  // When a image gets clicked,\n  // increase points and add the id of element to array.\n  clickedFriend = (id) => {\n    console.log(`Picture clicked with id: ${id}`);\n    if(!this.state.clicked.includes(id)){\n      this.pointIncrease();\n      this.state.clicked.push(id);\n      this.setState({\n        gameOver: false\n      })\n    } else {\n      this.resetGame();\n    }\n  };\n\n    // When the user clicks an image, increment by 1\n  // and check if the user has won\n  pointIncrease = () => {\n    let score = this.state.currentScore + 1;\n    console.log(`the score is ${score}`);\n    if (score === this.state.friends.length) {\n      this.setState({\n        result: \"You win! Start clicking to play again!\",\n        topScore: score,\n        currentScore: 0,\n        clicked: [],\n        friends,\n        gameOver: false\n      });\n    } else if (score > this.state.topScore) {\n      this.setState({\n        topScore: score,\n        currentScore: score,\n        result: \"Correct! New high score!\",\n      });\n    } else {\n      this.setState({\n        currentScore: score,\n        result: \"Correct!\"\n      });\n    }\n    this.resetFriendArray();\n  }\n  \n  // reset the game when the user chooses a duplicate\n  resetGame = () => {\n    this.setState({\n      points: 0,\n      currentScore:0,\n      topScore: this.state.topScore,\n      result: \"You Lose! click a card to start over\",\n      gameOver: true,\n      clicked: [],\n      friends,\n    });\n    console.log('Game over? ', this.state.gameOver);\n    this.resetFriendArray();\n  }\n\n  \n  // set the array to a new scrambled version using shuffle algorithm\n  resetFriendArray = () => {\n    let newArray = shuffleArray(friends);\n    this.setState({friends: newArray})\n  }\n\n\n  // Setting this.state.friends to the friends json array\n  state = {\n    currentScore: 0,\n    topScore: 0,\n    result: \"\",\n    clicked: [],\n    friends,\n    gameFinished: false\n  };\n\n  // Map over this.state.friends and render a FriendCard component for each friend object\n  render() {\n    return (\n      <div className=\"container\"> \n        <Jumbotron topScore={this.state.topScore} currentScore={this.state.currentScore} result={this.state.result}/>\n       <div className=\"row\">\n        {this.state.friends.map(friend => (\n          <FriendCard\n            clickedFriend={this.clickedFriend}\n            id={friend.id}\n            key={friend.id}\n            image={friend.image}\n          />\n        ))}\n        </div>\n      </div> \n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}